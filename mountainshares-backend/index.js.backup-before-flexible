// Enhanced Mountain Shares backend with governance funding
console.log("🚀 Enhanced function starting...");
console.log("Environment check:");
console.log("- STRIPE_SECRET_KEY:", process.env.STRIPE_SECRET_KEY ? "Found" : "Missing");
console.log("- PRIVATE_KEY:", process.env.PRIVATE_KEY ? "Found" : "Missing");
console.log("- CONTRACT_ADDRESS:", process.env.CONTRACT_ADDRESS ? "Found" : "Missing");

if (!process.env.STRIPE_SECRET_KEY) {
    console.error("❌ Missing STRIPE_SECRET_KEY environment variable");
    process.exit(1);
}

const express = require('express');
const stripe = require("stripe")(process.env.STRIPE_SECRET_KEY);
const cors = require('cors');
const { mintTokensAndFundGovernance } = require('./enhanced-webhook');
require('dotenv').config();

const app = express();

// Handle Stripe webhooks with raw body
app.use('/api/webhooks/stripe-complete', express.raw({ type: 'application/json' }));

app.use(cors());
app.use(express.json());

app.get('/health', (req, res) => {
    res.json({ 
        status: 'healthy', 
        cors: 'working', 
        timestamp: new Date().toISOString(),
        enhanced: 'governance-funding-enabled'
    });
});

app.post('/create-payment-session', async (req, res) => {
    try {
        const { amount, customerWallet, baseAmount, tokensToReceive } = req.body;
        
        console.log('Creating enhanced payment session:', {
            amount: amount + ' cents',
            baseAmount: '$' + (baseAmount || (amount/136)),
            tokensToReceive: (tokensToReceive || (amount/136)) + ' tokens',
            customerWallet: customerWallet
        });

        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: [{
                price_data: {
                    currency: 'usd',
                    product_data: {
                        name: `${Math.round(tokensToReceive || (amount/136))} Mountain Shares Token${Math.round(tokensToReceive || (amount/136)) > 1 ? 's' : ''}`,
                        description: `West Virginia Community Currency with Governance Distribution`
                    },
                    unit_amount: amount,
                },
                quantity: 1,
            }],
            mode: 'payment',
            success_url: 'https://cakidd.github.io/Commons-Connect/?success=true',
            cancel_url: 'https://cakidd.github.io/Commons-Connect/?cancel=true',
            metadata: {
                customerWallet: customerWallet,
                tokenAmount: tokensToReceive || (amount/136),
                baseAmount: baseAmount || (amount/136),
                totalPaid: (amount/100)
            }
        });

        console.log('✅ Enhanced Stripe session created:', session.id);
        console.log('💰 Customer will pay: $' + (amount/100));

        res.json({
            success: true,
            id: `ms_session_${Date.now()}`,
            orderid: `ms_order_${Date.now()}`,
            url: session.url
        });

    } catch (error) {
        console.error('❌ Payment session creation failed:', error.message);
        res.status(500).json({ success: false, error: error.message });
    }
});

app.post('/api/webhooks/stripe-complete', async (req, res) => {
    const sig = req.headers['stripe-signature'];
    let event;

    try {
        event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);
        console.log('✅ Enhanced webhook verified:', event.type);
    } catch (err) {
        console.log('❌ Webhook verification failed:', err.message);
        return res.status(400).send(`Webhook Error: ${err.message}`);
    }

    if (event.type === 'checkout.session.completed') {
        const session = event.data.object;
        const customerWallet = session.metadata.customerWallet;
        const tokenAmount = parseFloat(session.metadata.tokenAmount);
        const baseAmount = session.metadata.baseAmount;
        const totalPaid = session.metadata.totalPaid;

        console.log('🎉 ENHANCED PAYMENT COMPLETED!');
        console.log('💎 Customer wallet:', customerWallet);
        console.log('💰 Tokens to mint:', tokenAmount);
        console.log('💵 Base amount:', baseAmount);
        console.log('💳 Total paid:', totalPaid);

        // Use enhanced processing with governance funding
        const result = await mintTokensAndFundGovernance(customerWallet, tokenAmount, baseAmount);
        
        if (result.success) {
            console.log('🎉 COMPLETE SUCCESS: Tokens minted + Governance funded + Fees distributed!');
        } else {
            console.error('❌ Enhanced processing failed:', result.error);
        }
    }

    res.json({ received: true });
});

module.exports = app;
